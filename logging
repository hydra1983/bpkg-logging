#!/usr/local/bin/bash

#########################################
# THIS SECTION !!SHOULD NOT!! BE MODIFIED BY
# DEVELOPERS AS IT PROVIDES COMMON FUNCTIONS
# FOR ALL KINDS OF SCRIPTS
#
# Maintainer: Edison Guo <hydra1983@gmail.com>
#########################################
# Resolve Script Base
function _script_base() {
    local script_base script_name

    if [[ -L $0 ]] ; then
        script_base=$(cd $(dirname $(readlink -f $0)); pwd)
    else
        script_base=$(cd $(dirname $0); pwd)
    fi

    script_name=$(basename $0)

    if [[ -d "${script_base}/../share/${script_name}" ]]; then
        script_base="$(cd ${script_base}/../share/${script_name}; pwd)"
    fi

    echo "${script_base}"
}

readonly SCRIPT_BASE="$(_script_base)"

# Load Dependencies
[ -f ${SCRIPT_BASE}/_index.sh ] && source ${SCRIPT_BASE}/_index.sh || true
#########################################

#api: ### `_trace`
_trace () {
  shlog -l 'trace' $1
}

#api: ### `_debug`
_debug () {
  shlog -l 'debug' $1
}

#api: ### `_info`
_info () {
  shlog -l 'info' $1
}

#api: ### `_warn`
_warn () {
  shlog -l 'warn' $1
}

#api: ### `_error`
_error () {
  shlog -l 'error' $1
}

#api: ### `_assert`
_assert () {
  local expression="$1"
  local message="$2"
  local lineno="$3"

  local result=$(eval "test ${expression}" && echo "true")

  if [ "${result}" != "true" ]
  then
    if [[ ! -z "${message}" ]]; then
      local msg="${message}"
    fi

    if [[ ! -z "${lineno}" ]]; then
      local msg="${msg} '[File] $0@$lineno'"
    fi

    _error "${msg}"

    exit 1
  # else
  #   return
  #   and continue executing the script.
  fi
}
